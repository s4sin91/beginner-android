___________________________________
üî¥Inter-Thread communication
___________________________________
‚ö´what is inter thread communication.‡®á‡®π ‡®á‡©±‡®ï mechanism ‡®π‡©Å‡©∞‡®¶‡®æ 
 ‡®ú‡®ø‡®∏‡®¶‡©á ‡®µ‡®ø‡©±‡®ö running thread ‡®®‡©á ‡®ú‡®ø‡®π‡©ú‡®æ(object ‡®¶‡®æ) lock acquire 
 ‡®ï‡©Ä‡®§‡®æ ‡®â‡®π release(‡®õ‡©±‡®°) ‡®ï‡®∞ ‡®¶‡®ø‡©∞‡®¶‡®æ ‡®§‡©á ‡®â‡®π thread waiting ‡®ú‡®æ pause state 
 ‡®¶‡©á ‡®µ‡®ø‡©±‡®ö ‡®ö‡®≤‡®æ ‡®ú‡®æ‡®Ç‡®¶‡®æ‡•§ ‡®¶‡©Ç‡®ú‡®æ thread lock acquire ‡®ï‡®∞ ‡®≤‡©à‡®Ç‡®¶‡®æ ‡®§‡©á run ‡®ï‡®∞‡®¶‡®æ ‡®∞‡®π‡®ø‡©∞‡®¶‡®æ‡•§
 ‡®ú‡®ø‡®µ‡©á‡®Ç ‡®π‡©Ä ‡®¶‡©Ç‡®ú‡®æ thread complete ‡®π‡©ã ‡®ú‡®æ‡®Ç‡®¶‡®æ ‡®â‡®π notification ‡®¶‡©á ‡®¶‡®ø‡©∞‡®¶‡®æ ‡®ú‡®ø‡®π‡©ú‡®æ
 (‡®™‡®π‡®ø‡®≤‡®æ thread) wait/pause ‡®∏‡©Ä ‡®â‡®∏‡®®‡©Ç‡©∞ ‡®µ‡©Ä ‡®§‡©Ç‡©∞ ‡®¶‡©Å‡®¨‡®æ‡®∞‡®æ ‡®§‡©ã invoke ‡®π‡©ã ‡®ú‡®æ‡•§ 
Object class ‡®¶‡©á 3 method ‡®®‡®æ‡®≤ ‡®Ü‡®™‡®æ inter thread communication
 mechanism ‡®®‡©Ç‡©∞ achieve ‡®ï‡®∞ ‡®¶‡©á ‡®π‡®æ:-
(1) wait();
(2) notify();
(3) notifyAll();
___________________________________
1) wait: ‡®á‡®π current thread ‡®®‡©Ç‡©∞ pause/waiting state ‡®§‡©á ‡®â‡®π
 lock release ‡®ï‡®∞ ‡®¶‡®ø‡©∞‡®¶‡®æ‡•§ ‡®â‡®π thread ‡®ì‡®¶‡©ã ‡®§‡©±‡®ï wait ‡®ï‡®∞‡©Ç ‡®ú‡®¶‡©ã ‡®§‡©±‡®ï ‡®¶‡©Ç‡®ú‡®æ thread
 ‡®á‡®∏ thread ‡®≤‡®à notify ‡®ú‡®æ notifyAll method ‡®¶‡®æ use ‡®®‡®π‡©Ä ‡®ï‡®∞‡®¶‡®æ 
 ‡®á‡®∏ object ‡®≤‡®à‡•§ ‡®á‡©±‡®ï ‡®ó‡©±‡®≤ ‡®π‡©ã‡®∞ ‡®µ‡©Ä wait method overload ‡®ï‡©Ä‡®§‡®æ ‡®π‡©ã‡®á‡®Ü 
 ‡®§‡©á ‡®â‡®∏‡®¶‡©á ‡®µ‡®ø‡©±‡®ö ‡®Ü‡®™‡®æ time ‡®¶‡©á ‡®ï‡©á ‡®â‡®π thread ‡®ì‡®®‡©á time ‡®¨‡®æ‡®¶ ‡®µ‡©Ä invoke ‡®π‡©ã 
 ‡®∏‡®ï‡®¶‡®æ ‡®π‡©à ‡®ú‡©á ‡®¶‡©Ç‡®ú‡®æ thread ‡®™‡®π‡®ø‡®≤‡©á thread ‡®≤‡®à notify ‡®ú‡®æ notifyAll method
 ‡®¶‡®æ use ‡®®‡®π‡©Ä ‡®ï‡®∞‡®¶‡®æ‡•§

2) notify: ‡®á‡®π ‡®ú‡©ã thread wait ‡®ï‡®∞ ‡®∞‡®ø‡®π‡®æ ‡®â‡®∏ ‡®µ‡®æ‡®≤‡©á thread ‡®®‡©Ç‡©∞ ‡®§‡®æ‡®Ç ‡®á‡®π 
 invoke ‡®ï‡®∞‡®µ‡®æ ‡®¶‡®ø‡®â‡®ó‡®æ(wake up ‡®ï‡®∞‡®¶‡©Ç) ‡®§‡©á ‡®ñ‡©Å‡®¶ object ‡®¶‡©á lock ‡®®‡©Ç‡©∞ release 
 ‡®ï‡®∞ ‡®¶‡©á‡®µ‡©á‡®ó‡®æ‡•§ ‡®á‡®π ‡®∏‡®ø‡®∞‡®´‡®º ‡®á‡©±‡®ï thread ‡®®‡©Ç‡©∞ wake ‡®ï‡®∞ ‡®™‡®æ‡®ä‡®ó‡®æ‡•§

3) notifyAll: ‡®á‡®π ‡®∏‡®æ‡®∞‡©á ‡®¶‡©á ‡®∏‡®æ‡®∞‡©á thread ‡®®‡©Ç‡©∞ wake up ‡®ï‡®∞‡®¶‡©Ç ‡®§‡©á ‡®ñ‡©Å‡®¶ object
 ‡®¶‡©á lock ‡®®‡©Ç‡©∞ release ‡®ï‡®∞‡®¶‡©Ç‡•§ ‡®á‡®π ‡®∏‡®æ‡®∞‡©á thread ‡®®‡©Ç‡©∞ wake up ‡®ï‡®∞ ‡®∏‡®ï‡®¶‡®æ‡•§
NOTE: To call wait(), notify(), notifyAll() method on any 
 object, thread should own the lock of that object
 i.e. the thread should be inside synchronized area.
---------------------------------------------------------- 

----------------------------------------------------------

class TotalEarning extends Thread {
	int total = 0;
	public void run() {
		synchronized (this) {
			for (int i = 0; i <= 4; i++) {
				total = total + 66;
			}
			this.notify();
		}
	}
}
public class Main {
	public static void main(String[] args) throws InterruptedException {
		TotalEarning te = new TotalEarning();
		te.start();
		synchronized (te) {
			te.wait();
			System.out.println("Total is : " + te.total);
		}
	}
}
___________________________________
