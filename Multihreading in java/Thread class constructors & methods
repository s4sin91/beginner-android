üî¥Thread class constructor & methodsüî¥
----------------------------------------------------------
1) Thread t = new [Thread() this is constructor]
2) ‡®ï‡®à ‡®á‡®∏ examples ‡®¶‡©á ‡®µ‡®ø‡©±‡®ö Thread ‡®®‡©Ç‡©∞ extend ‡®ï‡®∞‡®¶‡©Ä‡®Ü‡®Ç ‡®§‡©á ‡®ï‡®à
 Runnable implement ‡®ï‡®∞‡®¶‡®ø‡®Ü‡®Ç‡•§ 
For more information visit this link:
https://youtu.be/GX3yZAhf5xE
----------------------------------------------------------
‚ö´ Simple constructors
NOTE: Runnable target ‡®Æ‡®§‡®≤‡®¨‡•§
1) Thread() default constructor
2) Thread(Runnable target)
----------------------------------------------------------
 example- Thread(Runnable target)
Test class ‡®ú‡©ã ‡®π‡©à ‡®â‡®π Runnable interface ‡®®‡©Ç‡©∞ implement 
‡®ï‡®∞‡®¶‡®æ ‡®ú‡©ã ‡®ï‡®ø ‡®π‡©ã ‡®ó‡®à target class ‡®§‡©á ‡®â‡®π‡©Ä target class ‡®Ü‡®™‡®æ
 ‡®á‡©±‡®•‡©á provide ‡®ï‡®∞‡®§‡©Ä‡•§
t is Runnable target.
Test t = new Test();
Thread th = new Thread(t);
th.start();
----------------------------------------------------------
3) Thread(String name) ‡®ú‡®¶‡©ã ‡®Ü‡®™‡®æ ‡®ï‡©ã‡®à thread create ‡®ï‡®∞‡®¶‡©á ‡®π‡®æ 
 ‡®§‡®æ‡®Ç JVM by default ‡®á‡®π‡®®‡®æ threads ‡®¶‡®æ name provide ‡®ï‡®∞ ‡®¶‡®ø‡©∞‡®¶‡®æ 
like thread1, thread2, ‡®™‡®∞ ‡®ú‡©á ‡®Ü‡®™‡®æ ‡®ö‡®π‡©Å‡©∞‡®¶‡©á ‡®π‡®æ ‡®µ‡©Ä ‡®Ü‡®™‡®æ ‡®Ü‡®™ ‡®ñ‡©Å‡®¶ 
name provide ‡®ï‡®∞ ‡®∏‡®ï‡®¶‡©á ‡®π‡®æ with: Thread(String name);
4)Thread(Runnable target, String name) ‡®ú‡®¶‡©ã ‡®Ü‡®™‡®æ implement 
‡®ï‡®∞ ‡®∞‡®π‡©á ‡®π‡©ã‡®à‡®è ‡®â‡®¶‡©ã‡®Ç ‡®á‡®∏‡®¶‡®æ use ‡®ï‡®∞‡®¶‡©á ‡®π‡®æ‡•§

‚ö´ Thread group constructor
5)Thread(ThreadGroup tg, Runnable target)
6)Thread(ThreadGroup tg, String name)
7)Thread(ThreadGroup tg, Runnable target, String name)
8)Thread(ThreadGroup tg, Runnable target, String name, long stackSize)
üîµ Thread methods

‚ö´ Basic thread methods
NOTE: native method- ‡®á‡®π ‡®â‡®π method ‡®π‡©à ‡®ú‡®ø‡©∞‡®®‡©ç‡®π‡®æ‡®Ç ‡®¶‡©Ä implementation 
java ‡®¶‡©á ‡®µ‡®ø‡©±‡®ö ‡®®‡®π‡©Ä ‡®ï‡©Ä‡®§‡©Ä ‡®ó‡®à(‡®Æ‡®§‡®≤‡®¨ ‡®á‡®π ‡®ï‡®ø‡®∏‡©á ‡®π‡©ã‡®∞ language ‡®¶‡©á ‡®µ‡®ø‡©±‡®ö code ‡®ï‡©Ä‡®§‡©á ‡®ó‡®è ‡®π‡©à)
1) public void run(){}
2) public synchronized void start(){}
3) public final native Thread currentThread(){} ‡®á‡®π static method 
‡®π‡©à ‡®ú‡©ã thread reference provide ‡®ï‡®∞‡®¶‡®æ‡•§
4)public final native boolean isAlive(){} ‡®ú‡®ø‡®µ‡©á name 
suggest thread ‡®ú‡®ø‡©∞‡®¶‡®æ ‡®π‡©à ‡®ú‡®æ ‡®®‡®π‡©Ä‡•§ ‡®á‡®π boolean value return ‡®ï‡®∞‡®¶‡®æ‡•§
 ‡®ú‡©á thread dead state ‡®¶‡©á ‡®µ‡®ø‡©±‡®ö ‡®π‡©à ‡®§‡®æ false ‡®®‡®π‡©Ä (thread alive ‡®π‡©à) 
true(true ‡®¶‡®æ ‡®Æ‡®§‡®≤‡®¨ thread execution state ‡®¶‡©á ‡®µ‡®ø‡©±‡®ö ‡®π‡©à)‡•§

‚ö´Naming related methods
5)public final String getName(){} get ‡®ï‡®∞‡®® ‡®≤‡®à
6) public final synchronized void setName(String name){} set ‡®ï‡®∞‡®® ‡®≤‡®à‡•§

‚ö´ Deamon thread method
7)public final boolean isDeamon(){} ‡®ï‡®ø ‡®â‡®π deamon thread ‡®π‡©à ‡®ú‡®æ ‡®®‡®π‡©Ä, 
‡®á‡®π boolean value return ‡®ï‡®∞‡®¶‡®æ‡•§
8)public final void setDeamon(boolean on){} ‡®á‡®∏ ‡®¶‡©á ‡®µ‡®ø‡©±‡®ö je true ‡®π‡©à 
 ‡®§‡®æ simple thread deamon thread create ‡®π‡©ã‡®ú‡©Ç‡•§ je false ‡®π‡©à ‡®§‡®æ‡®Ç ‡®â‡®π 
deamon thread create ‡®®‡®π‡©Ä ‡®π‡©ã‡®ä

‚ö´Thread priority method's
9) public final int getPriority(){} priority get ‡®ï‡®∞‡®® ‡®≤‡®à‡•§
10) public final void setPriorty(int newPriority){} to set priority

‚ö´Preventing thread execution method's(‡®á‡®π ‡®ú‡©ã thread ‡®ö‡©±‡®≤ ‡®∞‡®ø‡®π‡®æ(execute ‡®π‡©ã ‡®∞‡®ø‡®π‡®æ normally)
 ‡®â‡®∏‡®®‡©Ç‡©∞ ‡®ï‡©Å‡®ù time ‡®≤‡®à ‡®∞‡©ã‡®ï‡®¶‡©á ‡®π‡©à‡•§
11) public static native void sleep(long milli seconds) throws InterruptedException{}
12) public static native void yield(){}
13)public final void join() throws InterruptedException{}
----------------------------------------------------------
‡®á‡®π ‡®ï‡©Å‡®ù ‡®π‡©ã‡®∞ ‡®è‡®∏‡©á category ‡®¶‡©á method ‡®ú‡©ã depricated method ‡®Æ‡®§‡®≤‡®¨ ‡®á‡®π method java ‡®¶‡©á ‡®µ‡®ø‡©±‡®ö ‡®®‡®π‡©Ä ‡®∞‡®π‡©á‡•§
public final void suspend(){}
public final void resume(){}
public final void stop(){}
public void destroy(){}
----------------------------------------------------------

‚ö´Thread interrupt method
14) public void interrupt(){}
15) public boolean isInterrupted(){}
16) public static boolean interrupted(){}

‚ö´inter-thread communication method( Note:‡®á‡®π Thread class ‡®¶‡©á method ‡®®‡®π‡©Ä, 
‡®¨‡®≤‡®ï‡©Ä Object class ‡®¶‡©á method ‡®π‡©à but use ‡®á‡®π thread ‡®≤‡®à ‡®π‡©Å‡©∞‡®¶‡©á)
17) public final void wait() thorws InterruptedException{}
18) public final native void notify()
19) public final native void notifyAll()
