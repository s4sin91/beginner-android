----------------------------------
๐ด[ part 1 from lecture 1 to 4 ]๐ด
---------------------------------- 
๐ด๐ด๐ด IMPORTANT things to note

เจเฉ public static void main (String [] args) เจนเฉเฉฐเจฆเจพ เจเจน
 เจเฉเจฆ เจเฉฑเจ thread เจนเฉเฉฐเจฆเจพ(เจเฉ  JVM เจจเฉ create เจเฉเจคเจพ) เจคเฉ เจเจธเจฆเจพ 
 name main เจนเฉเฉฐเจฆเจพ เจนเฉเฅค
เจเจฟเฉฐเจจเจพ เจเฉเจ เจตเฉ main เจฆเฉ เจตเจฟเฉฑเจ เจฒเจฟเจเจฟเจ เจนเฉเฉฐเจฆเจพ เจเจน main thread เจนเฉ 
 execute เจเจฐเจฆเจพ, เจซเจฟเจฐ เจเจพเจนเฉ เจเฉเจ เจจเจตเจพเจ thread เจฆเจพ code เจฒเจฟเจเจฟเจ
 เจนเฉเจ main method เจฆเฉ เจตเจฟเฉฑเจเฅค
class Test extends Threads{
 public void run (){
// anything coded here }
}
class main {
public static void main(String[] args){
Test t = new Test();
t.start();}
}
----------------------------------------------------------
เจเจน เจฆเฉเจตเฉ เจเฉเจฆ เจฎเฉเจ thread execute เจเจฐเฉเฅค เจเจฟเจตเฉ เจเฉฑเจชเจฐ & เจฅเฉฑเจฒเฉ explain เจเฉเจคเจพ เจนเฉเจเจเฅค
Test t = new Test();
t.start(); 
----------------------------------------------------------
เจชเจฐ เจเฉ เจเฉเจ Test class เจฆเฉ run() method เจฆเฉ เจตเจฟเฉฑเจ เจฒเจฟเจเจฟเจ เจนเฉเจ เจเจน
 new thread เจนเฉ execute เจเจฐเฉ by default new thread เจฆเจพ name
 thread0 เจนเฉเฉฐเจฆเจพ เจเฉ JVM provide เจเจฐเจฆเจพเฅค 
___________________________________๐ด LECTURE 7, part1๐ด
----------------------------------------------------------
โซ method covered
2 basic method: 
(1) currentThread(){}
 (2) isAlive(){}
 & Naming method เจฆเฉเจตเฉ เจนเฉเฅค
1)getName(){}
 2)setName(String name){}
----------------------------------------------------------
___________________________________


๐ด LECTURE 8 part2๐ด
โซwhat how & why daemon?
daemon thread background เจคเฉ execute เจนเฉเฉฐเจฆเจพ เจนเฉ เจเจฟเจธเฉ เจฆเฉเจเฉ thread เจฆเฉเฅค
 เจเจน (daemon thread) เจเจฟเจธเจฆเฉ background run เจเจฐเจฆเจพ
 เจเจธเจจเฉเฉฐ service provide เจเจฐเจฆเจพเฅค
main method (main thread) เจฆเฉ background เจตเฉ daemon thread
execute เจนเฉเฉฐเจฆเฉ eg- Garbage Collector,finalizer,Attach Listener,Signal dispatcher etc
----------------------------------------------------------
for example:
(1) เจเจฟเจตเฉ ms-word เจฆเฉ เจตเจฟเฉฑเจ เจเฉ เจเจชเจพ เจเฉเจ spelling เจเจฒเจค type เจเจฐเจฆเฉเจ เจคเจพ เจเจน
 เจฆเฉฑเจธ เจฆเจฟเฉฐเจฆเจพ เจตเฉ เจเจน spelling เจเจฒเจค เจนเฉเฅค เจเจน เจตเฉ เจเฉฑเจ service provide เจเจฐ เจฐเจฟเจนเจพเฅค
(2) Garbage Collector: main method execute เจนเฉ เจฐเจฟเจนเจพ, เจชเจฐ เจเฉ
 suddenly memory full เจนเฉ เจเจ เจชเจฐ main method เจจเฉเฉฐ memory เจเจพเจนเฉเจฆเฉ เจนเฉ
 เจชเจฐ เจเจน เจเจธเจจเฉเฉฐ เจจเจนเฉ เจฎเจฟเฉฑเจฒ เจฐเจนเฉเฅค main method (เจเฉ เจเฉ main thread เจนเฉ เจเจธ )
 เจฆเฉ background เจเฉฑเจ daemon thread execute เจนเฉเฉฐเจฆเจพ เจฐเจนเจฟเฉฐเจฆเจพ เจเฉ เจนเฉ
 Garbage Collector เจคเฉ เจเจธเจฆเจพ (Garbage Collector) เจเฉฐเจฎ เจนเฉ เจเจฟ เจเฉ
 main method เจจเฉเฉฐ เจเฉเจ problem เจเจเจเจฆเฉ เจนเฉ [memory leakage, memory full etc]
 เจคเจพ Garbage Collector waste objects เจจเฉเฉฐ delete เจเจฐเจฆเจพ 
[ waste objects delete เจนเฉเจฃ เจจเจพเจฒ memory free เจนเฉ เจเจพเจเจฆเฉ เจนเฉ ]เจคเฉ
 main method เจจเฉเฉฐ execute เจเจฐเจฆเจพเฅค

NOTE: เจเจฟเฉฐเจจเจพ time main thread
(เจเฉฑเจฅเฉ main thread เจฎเจคเจฒเจฌ เจเจฟเจธ thread เจจเฉ daemon thread create เจเฉเจคเจพ)
 เจเฉเจ เจเฉฐเจฎ เจจเจนเฉเจ เจเจฐเจฆเจพ เจเจจเจพ time daemon thread เจตเฉ เจจเจนเฉ เจเฉฑเจฒเจฆเจพเฅค
 why bcoz daemon thread เจฆเฉเจเฉ thread เจฆเฉ background เจเฉฑเจฒเจฆเจพ เจคเฉ
 เจเจธเจจเฉเฉฐ (เจเจฟเจธเจฆเฉ background เจเฉฑเจฒเจฆเจพ เจเจธเจจเฉเฉฐ) service provide เจเจฐเจฆเจพ,
 เจเฉ main เจเฉเจ เจเฉฐเจฎ เจจเจนเฉ เจเจฐเจฆเจพ เจคเจพ daemon service เจเจฟเจธเจจเฉเฉฐ เจฆเจฟเจเจเจพเฅค
----------------------------------------------------------
โซ Daemon thread methods
void setDaemon(boolean);
boolean isDaemon();//this method check is thread Deamon or not
----------------------------------------------------------
โซ way to create Daemon thread
เจเจชเจพ เจชเจนเจฟเจฒเจพ thread เจจเฉเฉฐ daemon thread create เจเจฐเจฆเฉ เจนเจพ เจซเจฟเจฐ 
 thread start เจเจฐเจฆเฉ เจนเจพเฅค เจจเจนเฉ เจคเจพเจ เจเจน exception provide เจเจฐเฉ
  IlligalThreadStateException เจจเจพเจฎ เจฆเฉเฅค
NOTE- we cannot create main thread as daemon.
 why bcoz main thread เจชเจนเจฟเจฒเจพ เจนเฉ execute เจนเฉ เจเจพเจเจฆเจพ เจเจธ เจฒเจ
 เจเจน daemon thread create เจจเจนเฉ เจนเฉ เจธเจเจฆเจพเฅค
----------------------------------------------------------
Test t= new Test();
t. setDeamon(true);
t.start();
----------------------------------------------------------
โซdaemon thread life
daemon thread เจเจฟเจธ thread เจฆเฉ background เจเฉฑเจฒเจฆเจพ เจนเฉ เจเจธเจฆเฉ life เจคเฉ
 depend เจเจฐเจฆเฉ เจนเฉเฅค เจเจฟเฉฐเจจเจพ time main
 (เจเจฟเจธเจฆเฉ background daemon thread execute เจนเฉ เจฐเจฟเจนเจพ) thread
 execute เจเจฐเฉเจเจพ เจเจจเจพ time daemon thread execute เจเจฐเฉเจเจพ เจเจฆเฉ 
 main thread dead state เจฆเฉ เจตเจฟเฉฑเจ เจเจฟเจ เจเจฆเฉ เจนเฉ เจเจน (daemon thread) dead
 เจนเฉ เจเจฟเจเฅค why bcoz เจเจน(daemon thread) main thread เจจเฉเฉฐ service provide เจเจฐ เจฐเจฟเจนเจพเฅค
โซ Nature of daemon thread
 daemon thread inherit its nature/property from parent thread
 which is also known as main thread. main thread เจเจฟเจธเจจเฉ deamon
 เจจเฉเฉฐ create เจเฉเจคเจพเฅค
เจเฉ เจเจน(เจเจฟเจธเจจเฉ thread create เจเฉเจคเจพ) simple thread เจนเฉ เจคเจพเจ เจเจน simple thread เจฌเจฃเฉ,
 เจเฉ เจเจน daemon เจนเฉ เจคเจพ เจเจน by default daemon thread เจนเฉ create เจนเฉเจเฅค
โซJVM role in daemon thread
เจฎเฉฐเจจ เจเฉ เจเฉฑเจฒเฉ เจฌเจนเฉเจค เจธเจพเจฐเฉ threads เจนเฉ, JVM เจเจนเจจเจพ เจจเฉเฉฐ execute เจเจฐเจฆเจพ เจฐเจนเฉเจเจพ
 เจเจฆเฉ เจธเจพเจฐเฉ thread execute เจนเฉเจจเฉ เจฌเฉฐเจฆ เจนเฉ เจเจ เจเจฆเฉ JVM off/shutdown เจนเฉเจเฉเฅค
เจเฉ เจเฉเจ daemon thread execute เจนเฉ เจฐเจฟเจนเจพ เจนเฉเจเจเจพ เจคเจพ JVM เจเจธเจจเฉเฉฐ dead state
 เจฆเฉ เจตเจฟเฉฑเจ เจเจฐเจฆเฉ (kill เจเจฐเจเฉ) เจคเฉ เจเจช JVM shutdown เจนเฉ เจเจพเจเจเจพเฅค เจเฉฑเจฅเฉ เจเฉฑเจ เจเฉฑเจฒ เจฏเจพเจฆ
 เจฐเฉฑเจเจฃ เจตเจพเจฒเฉ เจนเฉ เจตเฉ JVM เจฆเฉเจเฉ simple thread เจคเฉ depend เจฐเจนเจฟเฉฐเจฆเจพ 
(เจฎเจคเจฒเจฌ เจเฉ simple thread execute เจนเฉ เจฐเจนเฉ เจนเฉ เจคเจพ JVM เจเจนเจจเจพ เจจเฉเฉฐ execute เจเจฐเจฆเจพ เจฐเจนเฉเจเจพ)
 เจชเจฐ เจเฉ เจฆเฉเจเฉ thread เจฆเฉ execution complete เจนเฉ เจเจ เจคเฉ เจเฉเจ daemon thread
 เจเจเฉ เจตเฉ execute เจนเฉ เจฐเจฟเจนเจพ เจคเจพ JVM เจชเจนเจฟเจฒเจพ เจเจธเจจเฉเฉฐ kill เจเจฐเฉเจเจพ เจซเจฟเจฐ JVM เจเจช shutdown เจนเฉเจเฉเฅค 
โซ daemon thread priority
by default เจคเจพ daemon thread เจฆเฉ priority low เจนเฉ เจนเฉเฉฐเจฆเฉ เจนเฉ
 เจชเจฐ เจซเจฟเจฐ เจตเฉ เจเจชเจพ เจจเฉเฉฐ เจเจธเจจเฉเฉฐ low เจนเฉ เจฐเฉฑเจเจฃเจพ เจเจพเจนเฉเจฆเจพ เจนเฉเฅค why bcoz
 daemon thread background เจคเฉ execute เจนเฉเฉฐเจฆเจพ เจนเฉ เจเจฟเจธเฉ เจฆเฉเจเฉ thread เจฆเฉเฅค
 เจเจธเจฆเฉ priority เจเจธ เจฒเจ เจเจพเจ เจคเจพเจ (เจเจฟเจธเจฆเฉ background เจเจน เจเฉฑเจฒเจฆเจพ เจนเฉ)
 เจเจธเจฆเฉ เจฌเจฐเจพเจฌเจฐ เจเจพ เจเจธเจคเฉ low เจนเฉเฉฐเจฆเฉ เจนเฉเฅค
 but we can change its priority according to our needs.


___________________________________

๐ด LECTURE 9, part3๐ด
----------------------------------------------------------
โซ Thread priority

----------------------------------------------------------
โซ priority range & how to set
priority are represented in the form of integer values
 เจเจฟเจธเจฆเฉ range เจนเฉเฉฐเจฆเฉ เจนเฉ 1-10 เจเฉ เจจเจนเฉ เจคเจพเจ เจเจน เจเฉฑเจ exception เจนเฉเจเจเฉเฅค
1=MIN_PRIORITY
5=NORM_PRIORITY
10=MAX_PRIORITY
by default main method เจฆเฉ priority 5 เจนเฉเฉฐเจฆเฉ เจนเฉ,
 เจเจฟเจตเฉ เจเจชเจพ เจจเฉเฉฐ เจชเจคเจพ เจตเฉ เจเจฆเฉ thread เจฌเจฃเจฆเจพ เจคเจพเจ เจเจน เจเจตเจฆเฉ parent thread
 เจคเฉ properties inherit เจเจฐเจฆเจพ เจคเฉ same เจเจธเฉ case เจตเจฟเฉฑเจ เจเจฆเฉ main thread
 เจคเฉ new thread create เจนเฉเจ เจเจธเจฆเฉ priority เจตเฉ 5 เจนเฉ เจนเฉเจ bcoz
 main thread เจฆเฉ เจจเฉเฉฐ default priority 5 เจนเฉเฉฐเจฆเฉเฅค
NOTE: priorities depend on platform (Windows does not support priorities)
โซJVM provides the priority to each thread & according to
 these priorities JVM allocate the processor
เจเจฟเจธ thread เจฆเฉ เจเจฟเจเจฆเจพ priority เจนเฉเจเจเฉ เจเจน เจชเจนเจฟเจฒเจพ execute เจนเฉเจเจเจพ
 เจเจฟเจธเจฆเฉ เจเฉฑเจ เจเจน เจฌเจพเจฆ เจตเจฟเฉฑเจ เจชเจฐ เจเฉ เจเจฟเจธเฉ threads เจฆเฉ priorities same
 เจนเฉ เจคเจพเจ เจเจน JVM เจคเฉ depend เจเจฐเฉเจเจพ เจตเฉ เจเจน เจเจฟเจธ thread เจจเฉเฉฐ เจชเจนเจฟเจฒเจพ processor เจฆเจฟเจเจเจพเฅค
 same priority thread เจจเฉเฉฐ processor เจฆเฉเจฃ เจฆเจพ เจเจน process 
 internally algorithms เจฆเฉ เจเฉฑเจชเจฐ depend เจเจฐเจฆเจพเฅค

___________________________________
๐ด LECTURE 10, part4๐ด
----------------------------------------------------------
โซ sleep method
Thread Class เจฆเฉ เจตเจฟเฉฑเจ 2 sleep methods เจนเฉ เจฎเจคเจฒเจฌ sleep method is overloaded.
1) public static native void sleep(long milliseconds) Throws InterruptedException 
2) public static void sleep(long milliseconds, int nanoseconds) Throws InterruptedException
----------------------------------------------------------
โซ เจเจน method เจเจฟเฉฐเจจเจพ time เจเจชเจพ provide เจเฉเจคเจพ เจนเฉเฉฐเจฆเจพ เจเจจเจพ time thread เจจเฉเฉฐ
 sleep mode เจฆเฉ เจตเจฟเฉฑเจ เจญเฉเจ เจฆเจฟเฉฐเจฆเจพ(เจฎเจคเจฒเจฌ thread execution เจฐเฉเฉฑเจ เจเจพเจ)
 เจคเฉ เจฌเจพเจฆ เจตเจฟเฉฑเจ เจซเจฟเจฐ เจคเฉ start เจนเฉเจเฉเฅค 
โซif the value of milliseconds is negative then "IllegalArgumentException" is throw.
โซif the value of nanoseconds is not in the range of 1-999999
 then "IllegalArgumentException" is thrown.
โซ เจเจฆเฉ เจตเฉ เจเจชเจพ sleep method เจฆเจพ use เจเจฐเจจเจพ เจคเจพเจ เจเจชเจพ เจจเฉเฉฐ 
 Exception เจตเฉ handle เจเจฐเจจเฉ เจชเจเจเฉ เจเฉ "InterruptedException" เจนเฉ
 เจจเจนเฉ เจคเจพ JVM compile time เจคเฉ compilation error show เจเจฐเฉ เจคเฉ 
 program compile เจนเฉ เจจเจนเฉ เจนเฉเจเจเจพเฅค
โซ เจเจฆเฉ เจเฉเจ thread sleep เจเจฐ เจฐเจฟเจนเจพ เจคเฉ เจเฉเจ เจฆเฉเจเจพ thread
 เจเจธเจจเฉเฉฐ (เจเฉ sleep เจเจฐ เจฐเจฟเจนเจพ/in sleeping mode) interrupt เจเจฐเจฆเจพ
 เจคเจพเจ เจเจน "InterruptedException" throw เจเจฐเจฆเฉเฅค
โซเจเจน method current thread เจฆเฉ execution pause เจเจฐ เจฆเจฟเฉฐเจฆเจพเจเฅค
เจเจฆเฉ JVM เจเจน method find เจเจฐ เจฒเฉเจฆเจพ code เจฆเฉ เจตเจฟเฉฑเจ เจคเจพเจ JVM check เจเจฐเจฆเจพ
 เจเจฟเจนเฉเจพ thread run เจเจฐ เจฐเจฟเจนเจพ เจคเฉ เจเจฟเจนเฉเฉ thread เจฒเจ sleep method use เจเฉเจคเจพ
 เจเจธ(current thread) thread เจฆเฉ execution pause เจเจฐ เจฆเจฟเฉฐเจฆเจพเฅค
เจเจฆเฉ เจตเฉ เจเจชเจพ sleep method use เจเจฐเจฆเฉ เจนเจพ to pause the execution of thread.
 the thread scheduler assign the CPU to another thread
 if เจเฉเจ thread exist เจเจฐเจฆเจพเฅค เจเจธเจฆเฉ เจเฉเจ guarantee เจจเจนเฉ เจตเฉ เจเจฟเฉฐเจจเจพ เจเจชเจพ
 sleep method เจฆเฉ เจตเจฟเฉฑเจ time เจฆเจฟเฉฑเจคเจพ เจเจจเจพ time เจนเฉ เจเจน thread pause เจนเฉเจ
 เจเจน totally thread scheduler เจคเฉ depend เจเจฐเจฆเจพเฅค
โซ เจเจฆเฉ thread sleep เจเจฐ เจฐเจฟเจนเจพ,it doesn't lose any locks
 or monitors that it had acquired before sleeping.
___________________________________
