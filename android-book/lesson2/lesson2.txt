___________________________________
üî¥Android and Model-View- Controller
___________________________________
‚ö´Overview: In this chapter, you are going to upgrade GeoQuiz 
to present more than one question.
----------------------------------------------------------
To make this happen, ‡®Ü‡®™‡®æ ‡®Ü‡®™‡®£‡©á  project ‡®µ‡®ø‡©±‡®ö question ‡®®‡®æ‡®Æ ‡®¶‡©Ä ‡®á‡©±‡®ï 
class add ‡®ï‡®∞‡®æ‡®ó‡©á‡•§ ‡®á‡®∏ class ‡®¶‡©Ä  instance ‡®á‡©±‡®ï single true-false
 question ‡®®‡©Ç‡©∞ encapsulate ‡®ï‡®∞‡©á‡®ó‡©Ä‡•§ ‡®´‡®ø‡®∞, ‡®Ü‡®™‡®æ MainActivity ‡®®‡©Ç‡©∞ manage 
 ‡®ï‡®∞‡®® ‡®≤‡®à question object ‡®¶‡©Ä ‡®á‡©±‡®ï array ‡®¨‡®£‡®æ‡®µ‡®æ‡®ó‡©á‡•§ ‡®´‡®ø‡®∞ ‡®Ü‡®™‡®æ MainActivity
 ‡®¶‡®æ manage ‡®ï‡®∞‡®® ‡®≤‡®à question object ‡®¶‡©Ä array create ‡®ï‡®∞‡®æ‡®ó‡©á‡•§
___________________________________
üî¥Create a new class

----------------------------------------------------------
public class Question {
private int mTextResId;
private boolean mAnswerTrue;
public Question(int textResId, boolean answerTrue) {
mTextResId = textResId;
mAnswerTrue = answerTrue;
}
}
----------------------------------------------------------
The Question class holds two pieces of data: the question 
text and the question answer (true or false).
Why is mTextResId an int and not a String? The mTextResId 
variable will hold the resource ID (always an
 int) of a
 string resource for the question. You will create the 
question string resources in a later
 section.

-----------
example of string resource (in string.xml):
 <string name="question_oceans">The Pacific Ocean is larger
 than
 the Atlantic Ocean.</string>
---------------------------------------------------------- 

üî¥Generated getters and setters (Question.java)
----------------------------------------------------------
‚ö´ question Java code
public class Question {
private int mTextResId;
private boolean mAnswerTrue;
...
public int getTextResId() {
return mTextResId;
}
public void setTextResId(int textResId) {
mTextResId = textResId;
 }
public boolean isAnswerTrue() {
return mAnswerTrue;
}
public void setAnswerTrue(boolean answerTrue) {
mAnswerTrue = answerTrue;
}
}
----------------------------------------------------------
‡®π‡©Å‡®£ question class complete ‡®π‡©ã ‡®ó‡®à‡•§ ‡®•‡©ã‡©ú‡©á time ‡®¨‡®æ‡®Ö‡®¶ ‡®Ü‡®™‡®æ question ‡®®‡©Ç‡©∞
 MainActivity ‡®®‡®æ‡®≤ ‡®ï‡©∞‡®Æ ‡®ï‡®∞‡®® ‡®≤‡®à modify ‡®ï‡®∞‡®æ‡®ó‡©á‡•§ ‡®ö‡®≤‡©ã ‡®¶‡©á‡®ñ‡©Ä‡®è ‡®µ‡©Ä ‡®á‡®π ‡®∏‡®æ‡®∞‡©á ‡®ü‡©Å‡©±‡®ï‡©ú‡©á
 ‡®á‡®ï‡©±‡®†‡©á ‡®ï‡®ø‡®µ‡©á ‡®ï‡©∞‡®Æ ‡®ï‡®∞‡®£‡®ó‡©á‡•§MainActivity question objects ‡®¶‡©Ä array ‡®¨‡®£‡®æ‡®â‡®ó‡©Ä‡•§
 ‡®´‡®ø‡®∞ ‡®á‡®π question display ‡®ï‡®∞‡®® ‡®§‡©á feedback provide ‡®ï‡®∞‡®® ‡®≤‡®à 
 3 buttons ‡®§‡©á TextView ‡®®‡®æ‡®≤ interact ‡®ï‡®∞‡©Ç‡®ó‡©Ä‡•§
___________________________________
üî¥MVC and android
Notice that the objects in Figure 2.4 are separated into 
three sections labeled Model, Controller, and
 View.
 Android applications are designed around an architecture 
 called Model-View-Controller, or
 MVC for short. 
 In MVC, all objects in your application must be a model 
 object, a view object, or a
controller object.

‚ö´
‚ö´
‚ö´Controller objects: ‡®á‡®π view and model objects ‡®®‡©Ç‡©∞ ‡®Ü‡®™‡®∏ ‡®µ‡®ø‡©±‡®ö ‡®ú‡©ã‡©ú‡®¶‡©á ‡®π‡®®‡•§
‡®á‡®π‡®®‡®æ ‡®ï‡©ã‡®≤ application logic ‡®π‡©Å‡©∞‡®¶‡®æ‡•§‡®á‡®π view object ‡®¶‡©Å‡®Ü‡®∞‡®æ start 
 ‡®ï‡©Ä‡®§‡©á ‡®ó‡®è different events ‡®¶‡®æ ‡®ú‡®µ‡®æ‡®¨ ‡®¶‡®ø‡©∞‡®¶‡©á ‡®π‡©à‡•§ ‡®á‡®π data ‡®¶‡©á flow ‡®®‡©Ç‡©∞ manage ‡®ï‡®∞‡®® 
 ‡®≤‡®à ‡®µ‡©Ä use ‡®π‡©Å‡©∞‡®¶‡©á‡•§

Figure 2.5 shows the flow of control between objects in response
 to a user event, like a press of a
 button. Notice that model and
 view objects do not talk to each other directly; controllers sit 
squarely
 in the middle of everything, receiving messages from some
 objects and dispatching instructions to
others.

___________________________________
üî¥Benefits of MVC 
‡®á‡©±‡®ï application ‡®â‡®¶‡©ã‡®Ç ‡®§‡©±‡®ï features ‡®®‡©Ç‡©∞ ‡®á‡®ï‡©±‡®†‡®æ ‡®ï‡®∞ ‡®∏‡®ï‡®¶‡©Ä ‡®π‡©à until it is too 
 complicated to understand. separating code into
classes helps you 
 design and understand the application as a whole; you can think 
 In terms of classes
instead of individual variables and methods.

Similarly, separating classes into model, view, and controller 
 layers helps you design and understand
 an application; you can
 think in terms of layers instead of individual classes.

Although GeoQuiz is not a complicated app, you can still see the 
 benefits of keeping layers separate.
In a moment, you are going to
 update GeoQuiz‚Äôs view layer to include a Next button. When you do 
 that,
you will not need to remember a single thing about the Question
 class you just created.
 
MVC also makes classes easier to reuse. A class with restricted 
responsibilities is more reusable
 than one with its fingers in every pie.

‡®â‡®¶‡®æ‡®π‡®∞‡®® ‡®≤‡®à, ‡®Ü‡®™‡®£‡©Ä model class , Question, ‡®á‡©±‡®ï true-false question ‡®®‡©Ç‡©∞ display
 ‡®ï‡®∞‡®® ‡®≤‡®à ‡®µ‡®∞‡®§‡©á ‡®ú‡®æ‡®£ ‡®µ‡®æ‡®≤‡©á widget ‡®¨‡®æ‡®∞‡©á ‡®ï‡©Å‡®ù ‡®®‡®π‡©Ä‡®Ç ‡®ú‡®æ‡®£‡®¶‡®æ ‡®π‡©à‡•§This makes it easy to use Question 
throughout your app for different purposes. for example, if ‡®Ü‡®™‡®æ
 ‡®á‡©±‡®ï ‡®µ‡®æ‡®∞ ‡®µ‡®ø‡©±‡®ö ‡®∏‡®æ‡®∞‡©á question ‡®¶‡©Ä list display ‡®ï‡®∞‡®®‡®æ ‡®ö‡®æ‡®π‡©Å‡©∞‡®¶‡©á ‡®π‡®æ, ‡®§‡®æ‡®Ç ‡®Ü‡®™‡®æ ‡®â‡®π‡©Ä object ‡®¶‡®æ
 use ‡®ï‡®∞ ‡®∏‡®ï‡®¶‡©á ‡®π‡®æ ‡®ú‡©ã ‡®á‡©±‡®ï question display ‡®ï‡®∞‡®® ‡®≤‡®à use ‡®ï‡©Ä‡®§‡®æ ‡®∏‡©Ä‡•§

if you wanted to display a list of all the questions at once, you could use
 the same object that you use here to display just one question at a time.
___________________________________
üî¥Updating the View Layer
‡®π‡©Å‡®£ ‡®ú‡®¶‡©ã‡®Ç ‡®ï‡®ø ‡®§‡©Å‡®π‡®æ‡®®‡©Ç‡©∞ MVC ‡®®‡®æ‡®≤ introduced ‡®ï‡©Ä‡®§‡®æ ‡®ó‡®ø‡®Ü ‡®π‡©à, ‡®§‡©Å‡®∏‡©Ä‡®Ç ‡®á‡©±‡®ï next button ‡®®‡©Ç‡©∞ include 
 ‡®ï‡®∞‡®® ‡®≤‡®à MainActivity ‡®¶‡©Ä view layer ‡®®‡©Ç‡©∞ update ‡®ï‡®∞‡®® ‡®ú‡®æ ‡®∞‡®π‡©á ‡®π‡©ã‡•§

android ‡®µ‡®ø‡©±‡®ö, view layer ‡®µ‡®ø‡©±‡®ö objects ‡®®‡©Ç‡©∞ ‡®Ü‡®Æ ‡®§‡©å‡®∞ '‡®§‡©á ‡®á‡©±‡®ï layout file ‡®¶‡©á ‡®Ö‡©∞‡®¶‡®∞
 XML ‡®§‡©ã‡®Ç inflate ‡®ï‡©Ä‡®§‡®æ ‡®ú‡®æ‡®Ç‡®¶‡®æ ‡®π‡©à‡•§ Project ‡®µ‡®ø‡©±‡®ö ‡®á‡®ï‡©±‡®≤‡©á layout ‡®®‡©Ç‡©∞ activity_main.xml 
 ‡®µ‡®ø‡©±‡®ö define ‡®ï‡©Ä‡®§‡®æ ‡®ó‡®ø‡®Ü ‡®π‡©à‡•§ 
So the changes you need to make to the view layer are:
Remove the android:text attribute from the TextView. You no longer 
want a hard-coded question
 to be part of its definition.
Give the TextView an android:id attribute. This widget will need a 
 resource ID so that you can
 set its text in QuizActivity‚Äôs code.
Add the new Button widget as a child of the root LinearLayout.
Return to activity_main.xml and make it happen
‚ö´string.xml ‡®¶‡©á ‡®µ‡®ø‡©±‡®ö ‡®µ‡©Ä string create ‡®ï‡®∞‡®£‡©Ä‡®Ü for questions.
üîµThat is all for now for project ‡®¶‡©Ä view layer. Time to wire everything up in your controller class,
MainActivity.
___________________________________
‚ö´Updating the Controller Layer.

In the previous chapter, project ‡®¶‡©á ‡®á‡©±‡®ï controller, MainActivity
 ‡®µ‡®ø‡©±‡®ö ‡®¨‡®π‡©Å‡®§ ‡®ï‡©Å‡®ù ‡®®‡®π‡©Ä‡®Ç ‡®π‡©ã ‡®∞‡®ø‡®π‡®æ ‡®∏‡©Ä‡•§ ‡®á‡®π activity_main.xml ‡®µ‡®ø‡©±‡®ö defined 
 layout display ‡®ï‡®∞‡®¶‡®æ ‡®∏‡©Ä ‡®§‡©á listener ‡®®‡©Ç‡©∞ 2 button '‡®§‡©á set ‡®ï‡®∞‡®ï‡©á 
 ‡®§‡©á ‡®â‡®®‡©ç‡®π‡®æ‡®Ç ‡®®‡©Ç‡©∞ Toast ‡®¨‡®£‡®æ ‡®¶‡®ø‡©∞‡®¶‡®æ ‡®∏‡©Ä‡•§

 ‡®π‡©Å‡®£ ‡®ú‡®¶‡©ã‡®Ç ‡®ï‡®ø ‡®Ü‡®™‡®£‡©á ‡®ï‡©ã‡®≤ retrieve ‡®ï‡®∞‡®® ‡®§‡©á display ‡®ï‡®∞‡®® ‡®≤‡®à ‡®ï‡®à questions ‡®π‡©à,
  MainActivity ‡®®‡©Ç‡©∞ project ‡®¶‡©á model ‡®Ö‡®§‡©á layer ‡®®‡©Ç‡©∞ ‡®ú‡©ã‡©ú‡®® ‡®≤‡®à
 hard work ‡®ï‡®∞‡®®‡®æ ‡®™‡®ä‡®ó‡®æ‡•§ 
----------------------------------------------------------
code this in MainActivity.java‡•§

public class QuizActivity extends AppCompatActivity {
private Button mTrueButton;
private Button mFalseButton;
private Button mNextButton;
private TextView mQuestionTextView;
private Question[] mQuestionBank = new Question[] {
new Question(R.string.question_oceans, true),
new Question(R.string.question_mideast, false),
new Question(R.string.question_africa, false),
new Question(R.string.question_americas, true),
new Question(R.string.question_asia, true),
};
private int mCurrentIndex = 0;
...
----------------------------------------------------------
Here you call the Question constructor several times and
 create an array of Question objects.
(In a more complex project, 
this array would be created and stored elsewhere. 
 In later apps, you will
see better options for storing model 
data. For now, we are keeping it simple and just creating
 the
array within your controller.)

‡®Ü‡®™‡®æ screen '‡®§‡©á questions ‡®¶‡©Ä ‡®™‡®∞‡©á‡®° get ‡®ï‡®∞‡®® ‡®≤‡®à question ‡®µ‡®ø‡©±‡®ö 
 mQuestionBank, mCurrentIndex, ‡®Ö‡®§‡©á accessor method ‡®¶‡®æ use ‡®ï‡®∞ ‡®∞‡®π‡©á ‡®π‡®æ‡•§
first, get a reference for the TextView and set its text to the
 question at the current index
----------------------------------------------------------
mQuestionTextView = (TextView) findViewById(R.id.question_text_view);
int question = mQuestionBank[mCurrentIndex].getTextResId();
mQuestionTextView.setText(question);
----------------------------------------------------------
‚ö´Save your files and check for any errors. Then run GeoQuiz.
 You should see the first question in the
 array appear in the
 TextView.Now let‚Äôs see about the Next button. First, get a 
reference to the button. Then set a
View.OnClickListener on it. This listener will increment the
 index and update the TextView‚Äôs text.
‚ö´Wiring up the new button (MainActivity.java)
----------------------------------------------------------

mNextButton = (Button) findViewById(R.id.next_button);
mNextButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
mCurrentIndex = (mCurrentIndex + 1) % mQuestionBank.length;
int question = mQuestionBank[mCurrentIndex].getTextResId();
mQuestionTextView.setText(question);
}
});
----------------------------------------------------------
‚ö´Encapsulating with updateQuestion()(MainActivity.java)
----------------------------------------------------------
public class QuizActivity extends AppCompatActivity {
...
private void updateQuestion() {
int question = mQuestionBank[mCurrentIndex].getTextResId();
mQuestionTextView.setText(question);
}
@Override
protected void onCreate(Bundle savedInstanceState) {
...
mQuestionTextView = (TextView) findViewById(R.id.question_text_view);
int question = mQuestionBank[mCurrentIndex].getTextResId();
mQuestionTextView.setText(question);
...
mNextButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
mCurrentIndex = (mCurrentIndex + 1) % mQuestionBank.length;
int question = mQuestionBank[mCurrentIndex].getTextResId();
mQuestionTextView.setText(question);
updateQuestion();
}
});
updateQuestion();
...
}
}
__________________________________
Run GeoQuiz and test your new Next button.

Now that you have the questions behaving appropriately, 
it is time to turn to the answers. At the
 moment, GeoQuiz
 thinks that the answer to every question is ‚ÄúFalse.‚Äù 
Let‚Äôs rectify that. Here again,
 you will implement a 
private method to encapsulate code rather than writing 
similar code in two
 places.
---------------------------------------------------------
The method that you are going to add to QuizActivity is:
private void checkAnswer(boolean userPressedTrue)
---------------------------------------------------------
This method will accept a boolean variable that identifies 
whether the user pressed True or False. Then,
 it will check
 the user‚Äôs answer against the answer in the current Question 
object. Finally, after
 determining whether the user answered
 correctly, it will make a Toast that displays the appropriate
 
 message to the user.
 In QuizActivity.java, add the
 implementation of checkAnswer(boolean)
__________________________________
‚ö´Adding checkAnswer(boolean) (QuizActivity.java)
---------------------------------------------------------
public class QuizActivity extends AppCompatActivity {
private void updateQuestion() {
int question = mQuestionBank[mCurrentIndex].getTextResId();
mQuestionTextView.setText(question);
}
private void checkAnswer(boolean userPressedTrue) {
boolean answerIsTrue = mQuestionBank[mCurrentIndex].isAnswerTrue();
int messageResId = 0;
if (userPressedTrue == answerIsTrue) {
messageResId = R.string.correct_toast;
} else {
messageResId = R.string.incorrect_toast;
}
Toast.makeText(this, messageResId, Toast.LENGTH_SHORT)
.show();
}
@Override
protected void onCreate(Bundle savedInstanceState) {
...
}
}
---------------------------------------------------------
Within the button‚Äôs listeners, call checkAnswer(boolean)
__________________________________
‚ö´Calling checkAnswer(boolean) (QuizActivity.java)
----------------------------------------------------------
public class QuizActivity extends AppCompatActivity {
...
@Override
protected void onCreate(Bundle savedInstanceState) {
...
mTrueButton = (Button) findViewById(R.id.true_button);
mTrueButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
Toast.makeText(QuizActivity.this,
R.string.incorrect_toast,
Toast.LENGTH_SHORT).show();
checkAnswer(true);
}
});
mFalseButton = (Button) findViewById(R.id.false_button);
mFalseButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
Toast.makeText(QuizActivity.this,
R.string.correct_toast,
Toast.LENGTH_SHORT).show();
checkAnswer(false);
}
});
mNextButton = (Button) findViewById(R.id.next_button);
...
}
}
----------------------------------------------------------

___________________________________
‚ö´GeoQuiz is ready to run again. Let‚Äôs get it running on a real device. 

