
Activity_main.xml ‡®µ‡®ø‡©±‡®ö XMLelements ‡®§‡©ã View object ‡®ï‡®ø‡®µ‡©á‡®Ç ‡®¨‡®£‡®¶‡©á ‡®π‡®®? 
 ‡®ú‡®µ‡®æ‡®¨ MainActivity Class ‡®µ‡®ø‡©±‡®ö ‡®∏‡®º‡©Å‡®∞‡©Ç ‡®π‡©Å‡©∞‡®¶‡®æ ‡®π‡©à‡•§‡®ú‡®¶‡©ã‡®Ç ‡®Ü‡®™‡®æ ‡®ï‡©ã‡®à ‡®µ‡©Ä project
 ‡®¨‡®£‡®æ‡®â‡®Ç‡®¶‡©á ‡®π‡®æ‡®Ç ‡®§‡®æ‡®Ç, ‡®ú‡©ã MainActivity ‡®π‡©à ‡®â‡®π activity ‡®¶‡©Ä ‡®π‡©Ä sub-class ‡®π‡©à‡•§ 
----------------------------------------------------------
AppCompatActivity ‡®¶‡©Ä details lesson 13 ‡®¶‡©á ‡®µ‡®ø‡©±‡®ö ‡®π‡©à‡•§
(AppCompatActivity)This file has three Activity methods: 
onCreate(Bundle), onCreateOptionsMenu(Menu), and
onOptionsItemSelected(MenuItem)
Ignore onCreateOptionsMenu(Menu) and onOptionsItemSelected(MenuItem) 
for now. lesson 13 ‡®¶‡©á ‡®µ‡®ø‡©±‡®ö menus ‡®¶‡©Ä details ‡®π‡©à‡•§
----------------------------------------------------------

‚ö´The onCreate(Bundle) method ‡®®‡©Ç‡©∞ ‡®â‡®∏ time call ‡®ï‡©Ä‡®§‡®æ ‡®ú‡®æ‡®Ç‡®¶‡®æ ‡®ú‡®¶‡©ã instance
 create ‡®π‡©Å‡©∞‡®¶‡®æ activity ‡®¶‡©Ä sub-class(‡®Æ‡®§‡®≤‡®¨ MainActivity ‡®¶‡®æ instance) ‡®¶‡®æ ‡•§
----------------------------------------------------------
‡®ú‡®¶‡©ã‡®Ç ‡®ï‡©ã‡®à Activity ‡®¨‡®£ ‡®ú‡®æ‡®Ç‡®¶‡©Ä ‡®π‡©à, ‡®§‡®æ‡®Ç ‡®á‡®∏‡®®‡©Ç‡©∞ manage ‡®ï‡®∞‡®® ‡®≤‡®à ‡®á‡©±‡®ï user interface
 ‡®¶‡©Ä ‡®≤‡©ã‡©ú ‡®π‡©Å‡©∞‡®¶‡©Ä ‡®π‡©à‡•§ activity ‡®®‡©Ç‡©∞ ‡®á‡®∏‡®¶‡®æ user interface ‡®¶‡©á‡®£ ‡®≤‡®à ‡®Ü‡®™‡®æ ‡®á‡®∏ method ‡®¶‡®æ use ‡®ï‡®∞‡®¶‡©á ‡®π‡®æ‡®Ç 
public void setContentView(int layoutResID);
----------------------------------------------------------
‡®á‡®π method layout ‡®®‡©Ç‡©∞ inflate ‡®ï‡®∞‡®¶‡®æ ‡®π‡©à ‡®Ö‡®§‡©á ‡®á‡®∏‡®®‡©Ç‡©∞(layout ‡®®‡©Ç‡©∞) screen '‡®§‡©á
 ‡®∞‡©±‡®ñ‡®¶‡©Ä ‡®π‡©à‡•§ ‡®ú‡®¶‡©ã‡®Ç layout inflate ‡®ï‡©Ä‡®§‡®æ ‡®ú‡®æ‡®Ç‡®¶‡®æ ‡®π‡©à, layout file ‡®µ‡®ø‡©±‡®ö ‡®π‡®∞‡©á‡®ï
 widget ‡®®‡©Ç‡©∞ ‡®á‡®∏‡®¶‡©á attributes ‡®®‡®æ‡®≤ instantiate ‡®ï‡©Ä‡®§‡®æ ‡®ú‡®æ‡®Ç‡®¶‡®æ ‡®π‡©à‡•§ ‡®Ü‡®™‡®æ ‡®ú‡®ø‡®π‡©ú‡®æ
 layout inflate ‡®ï‡®∞‡®®‡®æ ‡®â‡®∏ layout ‡®¶‡©Ä resource id pass ‡®ï‡®∞‡®¶‡©á ‡®π‡®æ‡®Ç‡•§
----------------------------------------------------------
‚ö´ Real Example: 
setContentView(R.layout.activity_main);
----------------------------------------------------------
üî¥Resources and resource IDs

layout ‡®á‡©±‡®ï resource ‡®π‡©à‡•§ resource application ‡®¶‡®æ ‡®á‡©±‡®ï ‡®ü‡©Å‡®ï‡©ú‡®æ(piece) ‡®π‡©à
 ‡®ú‡©ã code ‡®®‡®π‡©Ä‡®Ç ‡®π‡©à - eg image files, audio files, xml files‡•§
 code ‡®¶‡©á ‡®µ‡®ø‡©±‡®ö ‡®á‡©±‡®ï resource ‡®®‡©Ç‡©∞ access ‡®ï‡®∞‡®® ‡®≤‡®à ‡®Ü‡®™‡®æ ‡®â‡®∏‡®¶‡©Ä resource ID
 ‡®¶‡®æ use ‡®ï‡®∞‡®¶‡©á ‡®π‡®æ‡•§ layout ‡®¶‡©Ä resource ID ‡®π‡©à R.id.activity_main ‡•§
‡®á‡®π resource id R.java file ‡®¶‡©á ‡®µ‡®ø‡©±‡®ö store ‡®π‡©Å‡©∞‡®¶‡©Ä ‡®π‡©à‡•§
Android ‡®®‡©á ‡®™‡©Ç‡®∞‡©á layout ‡®Ö‡®§‡©á ‡®π‡®∞‡©á‡®ï string ‡®≤‡®à ‡®á‡©±‡®ï resource ID ‡®§‡®ø‡®Ü‡®∞ ‡®ï‡©Ä‡®§‡©Ä, 
 ‡®™‡®∞ ‡®á‡®∏‡®®‡©á activity_main.xml ‡®µ‡®ø‡©±‡®ö individual widget ‡®≤‡®à id ‡®§‡®ø‡®Ü‡®∞ ‡®®‡®π‡©Ä‡®Ç ‡®ï‡©Ä‡®§‡©Ä‡•§
 ‡®π‡®∞ widget ‡®®‡©Ç‡©∞ resource ID ‡®¶‡©Ä ‡®≤‡©ã‡©ú ‡®®‡®π‡©Ä‡®Ç ‡®π‡©Å‡©∞‡®¶‡©Ä  ‡®π‡©à‡•§ id generate ‡®ï‡®∞‡®® ‡®≤‡®à
 android:id ‡®¶‡®æ use ‡®ï‡®∞‡®¶‡©á ‡®π‡®æ widget ‡®¶‡©á ‡®µ‡®ø‡©±‡®ö‡•§ plus symbol+ indicate ‡®ï‡®∞‡®¶‡®æ ‡®ï‡®ø
 ‡®á‡®π ‡®á‡©±‡®ï new resource id ‡®π‡©à ‡®§‡©á ‡®á‡®π R.java file ‡®¶‡©á ‡®µ‡®ø‡©±‡®ö create ‡®π‡©ã ‡®ú‡®æ‡®â‡®ó‡©Ä 
 (‡®ú‡©ã integer ‡®π‡©ã‡®ä)‡•§ resource id ‡®¶‡©á‡®£ ‡®§‡©ã ‡®¨‡®æ‡®Ö‡®¶ ‡®Ü‡®™‡®æ widgets ‡®®‡©Ç‡©∞ MainActivity
 ‡®¶‡©á ‡®µ‡®ø‡©±‡®ö access ‡®ï‡®∞ ‡®∏‡®ï‡®¶‡©á ‡®π‡®æ‡®Ç‡•§

üî¥Getting references to widgets
----------------------------------------------------------
public View findViewById(int id)
‡®á‡®∏ method ‡®®‡®æ‡®≤ ‡®Ü‡®™‡®æ ‡®ï‡®ø‡®∏‡©á activity ‡®¶‡©á ‡®µ‡®ø‡©±‡®ö inflated widget ‡®¶‡®æ 
reference get ‡®ï‡®∞ ‡®∏‡®ï‡®¶‡©á ‡®π‡®æ‡®Ç‡•§
‡®á‡®π method widget ‡®¶‡©Ä ‡®á‡©±‡®ï resource ID ‡®®‡©Ç‡©∞ accept ‡®ï‡®∞‡®¶‡©Ä ‡®π‡©à ‡®Ö‡®§‡©á ‡®á‡©±‡®ï 
 View object return ‡®ï‡®∞‡®¶‡©Ä ‡®π‡©à‡•§ MainActivity.java ‡®µ‡®ø‡©±‡®ö,
 inflated objects ‡®®‡©Ç‡©∞ retrieve ‡®ï‡®∞‡®® ‡®≤‡®à ‡®Ü‡®™‡®£‡©á Buttons ‡®¶‡©Ä 
 resource ID ‡®¶‡®æ use ‡®ï‡®∞‡®¶‡©á ‡®π‡©à‡•§   Note that you must cast the
 returned View to Button before assigning it.
some details here of this process:
https://stackoverflow.com/questions/3477422/what-does-layoutinflater-in-android-do
___________________________________
üî¥Setting listeners

android application ‡®Ü‡®Æ ‡®§‡©å‡®∞ '‡®§‡©á event driven ‡®π‡©Å‡©∞‡®¶‡©Ä‡®Ü‡®Ç ‡®π‡®®‡•§ 
 unlike Command line program ‡®ú‡®æ‡®Ç scrips (‡®¶‡©á ‡®â‡®≤‡®ü,[unlike ‡®¶‡®æ meaning]),
 event driven application start ‡®π‡©Å‡©∞‡®¶‡©Ä‡®Ü‡®Ç ‡®π‡®® ‡®Ö‡®§‡©á ‡®´‡®ø‡®∞ ‡®ï‡®ø‡®∏‡©á event ‡®¶‡©Ä 
 wait ‡®ï‡®∞‡®¶‡©Ä‡®Ü‡®Ç ‡®π‡®®, ‡®ú‡®ø‡®µ‡©á‡®Ç ‡®ï‡®ø user ‡®á‡©±‡®ï button press ‡®ï‡®∞‡®¶‡®æ ‡®π‡©à‡•§ events ‡®®‡©Ç‡©∞
 OS ‡®ú‡®æ‡®Ç ‡®ï‡®ø‡®∏‡©á ‡®π‡©ã‡®∞ application ‡®¶‡©Å‡®Ü‡®∞‡®æ ‡®µ‡©Ä ‡®∏‡®º‡©Å‡®∞‡©Ç ‡®ï‡©Ä‡®§‡®æ ‡®ú‡®æ ‡®∏‡®ï‡®¶‡®æ ‡®π‡©à, ‡®™‡®∞ 
 user-initiated events ‡®∏‡®≠‡®§‡©ã clear/obvious ‡®π‡©à‡•§

‡®ú‡®¶‡©ã‡®Ç ‡®Ü‡®™‡®£‡©Ä application ‡®ï‡®ø‡®∏‡©á specific event ‡®¶‡©Ä wait ‡®ï‡®∞ ‡®∞‡®π‡©Ä ‡®π‡©à, 
 ‡®§‡®æ‡®Ç ‡®Ö‡®∏‡©Ä‡®Ç ‡®ï‡®π‡®ø‡©∞‡®¶‡©á ‡®π‡®æ‡®Ç ‡®ï‡®ø ‡®á‡®π ‡®â‡®∏ event ‡®≤‡®à "‡®∏‡©Å‡®£ ‡®∞‡®π‡©Ä ‡®π‡©à (listen for)"‡•§ 
 ‡®ú‡®ø‡®∏ object ‡®®‡©Ç‡©∞ ‡®Ü‡®™‡®æ ‡®ï‡®ø‡®∏‡©á event ‡®¶‡®æ ‡®ú‡®µ‡®æ‡®¨ ‡®¶‡©á‡®£ ‡®≤‡®à create ‡®ï‡©Ä‡®§‡®æ ‡®π‡©à, 
 ‡®â‡®∏‡®®‡©Ç‡©∞ listener ‡®ï‡®ø‡®π‡®æ ‡®ú‡®æ‡®Ç‡®¶‡®æ ‡®π‡©à, ‡®Ö‡®§‡©á listener ‡®â‡®∏ event ‡®≤‡®à ‡®á‡©±‡®ï 
 listener interface implement  ‡®ï‡®∞‡®¶‡®æ ‡®π‡©à‡•§

Android SDK ‡®µ‡©±‡®ñ-‡®µ‡©±‡®ñ events ‡®≤‡®à listener interface ‡®¶‡©á ‡®®‡®æ‡®≤ ‡®Ü‡®â‡®Ç‡®¶‡®æ ‡®π‡©à,
 ‡®á‡®∏ ‡®≤‡®à ‡®Ü‡®™‡®æ ‡®®‡©Ç‡©∞ ‡®≤‡®ø‡®ñ‡®£ ‡®¶‡©Ä ‡®≤‡©ã‡©ú ‡®®‡®π‡©Ä‡®Ç ‡®π‡©à‡•§ ‡®Ü‡®™‡®£‡©á case ‡®¶‡©á ‡®µ‡®ø‡©±‡®ö, ‡®ú‡®ø‡®∏ event ‡®®‡©Ç‡©∞ ‡®Ü‡®™‡®æ
 listen ‡®ï‡®∞‡®®‡®æ ‡®π‡©à ‡®â‡®π ‡®á‡©±‡®ï button ‡®π‡©à ‡®µ‡©Ä ‡®â‡®π press ‡®π‡©ã‡®á‡®Ü ‡®§‡®æ‡®Ç ‡®ï‡®∞‡®ï‡©á ‡®Ü‡®™‡®æ ‡®á‡®π
 View.OnClickListener interface ‡®®‡©Ç‡©∞ implement ‡®ï‡®∞‡®æ‡®ó‡©á‡•§
----------------------------------------------------------
mTrueButton = (Button) findViewById(R.id.true_button);
mTrueButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
// Does nothing yet, but soon!
}
});
‡®á‡®∏ example ‡®¶‡©á ‡®µ‡®ø‡©±‡®ö:- ‡®Ü‡®™‡®æ set ‡®ï‡©Ä‡®§‡®æ listener ‡®§‡®æ ‡®ú‡©ã ‡®â‡®π ‡®Ü‡®™‡®æ ‡®®‡©Ç‡©∞ inform ‡®ï‡®∞
 ‡®∏‡®ï‡©á ‡®µ‡©Ä button press ‡®π‡©ã‡®á‡®Ü‡•§ ‡®á‡®π setOnClickListener(OnClickListener) 
 method listener ‡®®‡©Ç‡©∞ argument ‡®≤‡©à‡®Ç‡®¶‡®æ‡•§ especially ‡®á‡®π ‡®á‡©±‡®ï 
object(View v type ‡®¶‡®æ) ‡®≤‡©à‡®Ç‡®¶‡®æ ‡®ú‡©ã OnClickListener ‡®®‡©Ç‡©∞ implement ‡®ï‡®∞‡®¶‡®æ‡•§
----------------------------------------------------------

üî¥Using anonymous inner classes

‡®á‡®π listener implement ‡®ï‡©Ä‡®§‡®æ ‡®ó‡®ø‡®Ü as an anonymous inner class.
 The syntax is a little tricky, but it helps to
remember that everything within the outermost set of parentheses
 is passed into setOnClickListener(OnClickListener) ‡•§
 ‡®á‡®π‡®®‡®æ‡®Ç brackets ‡®¶‡©á ‡®µ‡®ø‡©±‡®ö , ‡®Ü‡®™‡®æ ‡®á‡©±‡®ï new, nameless class create ‡®ï‡©Ä‡®§‡©Ä ‡®π‡©à 
 ‡®§‡©á ‡®â‡®∏‡®¶‡©Ä ‡®∏‡®æ‡®∞‡©Ä implementation paas ‡®µ‡©Ä pass ‡®ï‡©Ä‡®§‡©Ä ‡®π‡©à‡•§
----------------------------------------------------------
mTrueButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
// Does nothing yet, but soon!
}
});
----------------------------------------------------------
‡®á‡®∏ book ‡®¶‡©á ‡®∏‡®æ‡®∞‡©á listener ‡®®‡©Ç‡©∞ anonymous inner class ‡®µ‡®ú‡©ã‡®Ç implement
 ‡®ï‡©Ä‡®§‡®æ ‡®ú‡®æ‡®µ‡©á‡®ó‡®æ‡•§ ‡®á‡®∏ ‡®§‡®∞‡©ç‡®π‡®æ‡®Ç ‡®ï‡®∞‡®® ‡®®‡®æ‡®≤ listener method ‡®¶‡©Ä implementation 
 ‡®â‡©±‡®•‡©á ‡®π‡©Ä ‡®ï‡©Ä‡®§‡©Ä ‡®ú‡®æ‡®Ç ‡®∏‡®ï‡®¶‡©Ä ‡®π‡©à ‡®ú‡®ø‡©±‡®•‡©á ‡®â‡®∏‡®¶‡©Ä ‡®≤‡©ã‡©ú ‡®π‡©à bcoz class ‡®á‡©±‡®ï ‡®•‡®æ‡®Ç ‡®§‡©á use ‡®ï‡©Ä‡®§‡©Ä 
 ‡®ú‡®æ‡®â‡®ó‡©Ä ‡®§‡©á ‡®á‡®∏ ‡®®‡®æ‡®≤ overrhead ‡®µ‡©Ä ‡®ò‡©±‡®ü ‡®ú‡®æ‡®ä‡®ó‡®æ‡•§ 
anonymous class implement ‡®ï‡®∞‡®¶‡©Ä ‡®π‡©à OnClickListener ‡®®‡©Ç‡©∞‡•§ 
‡®á‡®∏ (interface) ‡®¶‡©á ‡®µ‡®ø‡©±‡®ö ‡®á‡©±‡®ï sole method onClick(View) ‡®π‡©Å‡©∞‡®¶‡®æ 
‡®Ü‡®™‡®æ ‡®®‡©Ç‡©∞ implement ‡®ï‡®∞‡®®‡®æ ‡®™‡©à‡®Ç‡®¶‡®æ (but for now ‡®Ü‡®™‡®æ ‡®â‡®∏‡®®‡©Ç‡©∞ ‡®ñ‡®æ‡®≤‡©Ä ‡®µ‡©Ä ‡®õ‡©±‡®° ‡®∏‡®ï‡®¶‡©á) ‡®π‡©à‡•§
listener ‡®Ü‡®™‡®£‡©á ‡®§‡©ã‡®Ç ‡®ö‡®æ‡®π‡©Å‡©∞‡®¶‡®æ ‡®π‡©à ‡®µ‡©Ä ‡®Ü‡®™‡®æ ‡®â‡®∏‡®®‡©Ç‡©∞ implement ‡®ï‡®∞‡©Ä‡®è ‡®™‡®∞ ‡®á‡®∏‡®®‡©Ç‡©∞ 
‡®ï‡®ø‡®µ‡©á‡®Ç implement ‡®ï‡®∞‡®®‡®æ ‡®á‡®∏ ‡®¨‡®æ‡®∞‡©á ‡®ï‡©ã‡®à rule ‡®®‡®π‡©Ä ‡®¨‡®£‡®ø‡®Ü‡•§
___________________________________
üî¥Toast method
___________________________________
üî¥ Android build process

By now, you probably have some burning questions about how the
 Android build process works. You have already seen that
 Android Studio builds your project automatically as you modify 
 it rather than on command. During the build process, the
 Android tools take your resources, code, and the 
 AndroidManifest.xml file (which contains meta-data about the application) 
 and turn them into an .apk file. This file is then signed with 
 a debug key, which allows it to run on the emulator.
 (To distribute your .apk to the masses, you have to sign it with 
 a release key. There is more information about this process
 in the Android developer documentation at
 http://developer.android.com/tools/publishing/preparing.html.)

activity_main.xml ‡®¶‡©á content ‡®á‡©±‡®ï application ‡®µ‡®ø‡©±‡®ö view object 
 ‡®µ‡®ø‡©±‡®ö ‡®ï‡®ø‡®µ‡©á‡®Ç ‡®¨‡®¶‡®≤‡®¶‡©á ‡®π‡©à? As part of the build process, aapt
 (Android Asset Packaging Tool) compile ‡®ï‡®∞‡®¶‡®æ layout file 
 resources ‡®®‡©Ç‡©∞ more compact format ‡®¶‡©á ‡®µ‡®ø‡©±‡®ö‡•§ ‡®á‡®π‡®®‡®æ‡®Ç compiled
 resource files ‡®®‡©Ç‡©∞ .apk file ‡®µ‡®ø‡©±‡®ö pack ‡®ï‡©Ä‡®§‡®æ ‡®ú‡®æ‡®Ç‡®¶‡®æ ‡®π‡©à‡•§
 ‡®´‡®ø‡®∞, ‡®ú‡®¶‡©ã‡®Ç MainActivity ‡®¶‡©á onCreate(‚Ä¶) method ‡®µ‡®ø‡©±‡®ö setContentView(‚Ä¶)
 ‡®®‡©Ç‡©∞ call ‡®ï‡©Ä‡®§‡®æ ‡®ú‡®æ‡®Ç‡®¶‡®æ ‡®π‡©à, MainActivity layout file ‡®¶‡©á ‡®µ‡®ø‡©±‡®ö defined
 ‡®π‡®∞‡©á‡®ï view object ‡®®‡©Ç‡©∞ instantiate ‡®ï‡®∞‡®® ‡®≤‡®à LayoutInflater
 class ‡®¶‡®æ use ‡®ï‡®∞‡®¶‡©Ä ‡®π‡©à‡•§

‡®Ü‡®™‡®æ XML ‡®µ‡®ø‡©±‡®ö define ‡®ï‡®∞‡®® ‡®¶‡©Ä ‡®¨‡®ú‡®æ‡®è activity ‡®µ‡®ø‡©±‡®ö ‡®Ü‡®™‡®£‡©á
 view classes ‡®®‡©Ç‡©∞ programmatically ‡®∞‡©Ç‡®™ ‡®µ‡®ø‡©±‡®ö ‡®µ‡©Ä ‡®¨‡®£‡®æ ‡®∏‡®ï‡®¶‡©á ‡®π‡®æ‡•§ 
 But there are benefits to separating your
 presentation from the logic of the application‡•§ 
The main one is taking advantage of configuration
 changes built into the SDK, which you will learn more
about in Chapter 3.)
___________________________________
üî¥ Android build tools
___________________________________


